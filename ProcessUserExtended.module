<?php

class ProcessUserExtended extends ProcessUser {

  static public function getModuleInfo() {
		return array(
			'title' => __('Users extended', __FILE__), // getModuleInfo title
			'version' => 101,
			'summary' => __('Extended view for user management', __FILE__), // getModuleInfo summary
			'permanent' => false, 
			'permission' => 'user-admin',
			); 
	}

	public function ___execute() {
	
		$out = '';

		// Grab filter form
		$form = $this->getFilterForm();
		if ($form instanceof InputfieldFieldset || $form instanceof InputfieldForm) {
			$out .= $form->render();
		} else if ($form) {
			$out .= $form;
		}

		// Build filter selector (if filter form exists)
		$selector = $form ? $this->getFilterSelector() : null;

        if ($this->input->whitelist('search')) {
            $directHit = $this->users->get("name=" . $this->input->whitelist('search'));
            if ($directHit->id) $out .= "<h3>". $this->_('Found by username') .": <a href='./edit/?id=$directHit->id'>$directHit->name</a></h3>";
        }

		return $out . $this->renderList($selector, array("arrayToCSV" => false));
		
	}
	
	/**
	 * Build filter forms for execute method
	 *
	 * This being a method of it's own helps us both keep this separate from
	 * main execute method, but also makes it possible for external code to
	 * alter return value (add/remove fields etc.) based on their needs.
	 *
	 * @return mixed InputfieldFieldset by default, but can be altered by hooks
	 */
	public function ___getFilterForm() {
		
		$fields = $this->modules->get("InputfieldFieldset");
		
		$form = $this->modules->get("InputfieldForm");
		$form->attr('method', 'get');
		$form->attr('id', 'userSearch');
		$form->label = $this->_("Filter users");
		if (!$this->input->get->roles && !$this->input->get->search) {
			$form->collapsed = Inputfield::collapsedYes;
		}
		
		$field = $this->modules->get("InputfieldText");
		$field->attr('name', 'search');
		$field->label = $this->_("Search");
		if ($this->input->get->search) {
			$this->input->whitelist('search', $this->sanitizer->text($this->input->get->search));
			$field->attr('value', $this->input->whitelist('search'));
		}
		$form->add($field);
		
		$field = $this->modules->get("InputfieldCheckboxes");
		$field->attr('name', 'roles');
		$field->optionColumns = 5;
		foreach(wire('roles') as $role) {
			if ($role->name == "guest") continue;
			$attrs = array();
			$this->input->whitelist("roles", $this->input->get->roles);
			if (is_array($this->input->get->roles)) {
				if(in_array($role->name, $this->input->get->roles)) {
					$attrs['selected'] = 'selected';
				}
			}
			$field->addOption($role->name, $role->get('title|name'), $attrs);
		}
		$field->label = $this->_("Filter by role");
		$form->add($field);
		
		$field = $this->modules->get("InputfieldSubmit");
		$field->attr('value', $this->_("Search"));
		$form->add($field);
		
		$fields->add($form);
		
		return $fields;
		
	}
	
	/**
	 * Build selector for execute method
	 *
	 * @return string selector string
	 */
	public function ___getFilterSelector() {

		$selector = "limit=25, status<" . Page::statusMax;
		
		if ($this->input->get->roles) {
			$roles = new PageArray;
			foreach($this->input->get->roles as $roleName) {
				$role = $this->roles->get($roleName);
				if ($role->id) $roles->add($role);
			}
			if ($roles->count()) $selector .= ", roles=$roles";
		}
		if ($this->input->get->search) {
			$search = $this->sanitizer->selectorValue($this->input->get->search);
			$selector .= ", name|title%=$search";
		}
		
		return $selector;
		
	}
	
	public function ___executeList() {
		return $this->renderList("limit=25, status<" . Page::statusMax); 
	}
	
	protected function renderList($selector = '', $pagerOptions = array()) {
		$out = '';

		if(!$this->pages->getTemplate()) {
			$form = $this->getTemplateFilterForm();		
			$out = $form->render();
		}

		$table = $this->modules->get("MarkupAdminDataTable"); 
		$table->setEncodeEntities(false); 
		$fieldNames = $this->showFields; 
		$fieldLabels = $fieldNames; 

		foreach($fieldLabels as $key => $name) {
			if($name == 'name') {
				$fieldLabels[$key] = $this->_('Name'); // Label for 'name' field
				continue; 
			}
			$field = wire('fields')->get($name); 	
			$languageID = wire('user')->language ? wire('user')->language->id : '';
			$label = $field->get('label' . $languageID);
			if(!$label) $label = $field->label; 
			if(!$label) $label = $name; 
			$fieldLabels[$key] = htmlentities($label, ENT_QUOTES, "UTF-8");
		}

		$table->headerRow($fieldLabels); 
		$pages = $this->users->find($selector);

		foreach($pages as $page) {
			if(!$page->editable()) continue; 
			$n = 0; 
			$row = array();
			foreach($fieldNames as $name) {
				if(!$n) $row[$page->get($name) . ' '] = "edit/?id={$page->id}";
					else $row[] = $this->renderListFieldValue($name, $page->get($name)); 
				$n++;
			}
			$table->row($row); 
		}

		if($this->page->addable()) $table->action(array($this->_('Add New') => 'add/'));

		if($pages->getTotal() > count($pages)) {
			$pager = $this->modules->get("MarkupPagerNav"); 
			$out .= $pager->render($pages, $pagerOptions);
		}

		$out .= $table->render();

		return $out; 
	}
}
